

 -- TIROUS TOOLBOX LIBRARY VERSION HISTORY --


	The Tirous Toolbox library operates upon a strict 'MAJOR.MINOR' based
	versioning system.

	MINOR level updates are additions to the library, alongside potentially a few
	vary small removals or modifications, however these ladder two are to be done
	on a conservative basis, ensuring *reasonable* backwards compatibility.

	MAJOR level updates involve major additions, removals, and modifications to 
	the library, with no attempt at preserving backwards compatibility.

	Changes to documentation or tiny bug fixes which do not change the behaviour
	or interface of the API may not be noted in this version history.


Version 0.0 (September 26th, 2021)


	- Began development of the Tirous Toolbox library.


Version 1.0 (November 22nd, 2021)


	- Finished development of the initial version of the Tirous Toolbox library.


Version 1.1 (November 25th, 2021)


	- Removed the 'patch' level from the project's version number, as *releasing* a 
	  new *version* for EVERY tiny bug fix would be SUPER annoying...

	- Fixed a billion tiny errors, mostly regarding header file X requiring something
	  from header file Y, but not including Y yet.


Version 1.2 (November 26th, 2021)


	- The library uses a single global variable for its shared pointer implementation.

	  To this end, in order to fix linkage problems that arose from this, naive on my
	  part, usage of global variables, a notion of a 'home source file' has been defined
	  in order for the library to be setup correctly.

	  See docs/crashcourse.txt for details.


Version 2.0 (March 3rd, 2022)


	- Major library revision following (...the failure of) my latest project, with me 
	  releasing this update in preparation for my next project (which is attempt #2, lol.)

	- Mostly just library removals, actually, with me cleaning out a lot of old stuff
	  that never actually ended up being useful.

	- Removed ALL *fancy pointer* stuff, including the library's custom scoped and shared
	  pointer implementations, which turned out to just be inferior versions to the 
	  standard library ones, with me never ending-up using them.

	- Completely removed the above *home source file* notion from the library, due to the
	  removal of the above fancy pointer stuff, and thus the stray global variable which
	  forced the creation of the home source file system to make the library compile.

	- Completely removed aliases like tt::vector and tt::hash_map, which were aliases
	  of things like std::vector and std::unordered_map, because they only added complexity,
	  and were never actually used.

	- Changes the 'visualize' function of the library's string visualization system to now
	  be the 'vis' function. This change was made due to how the word 'visualize' made a
	  bunch of string function names overly long, which ended up feeling gross.

	- Added tt_wchar, tt_char16 and tt_char32 versions of the contents of tt/character_arrays.h, 
	  which turned out to be pretty useful, but which weren't added yet.

	- Added tt::fs as an alias of std::filesystem, to tt/file.h.

	- Added tt_uintptr and tt_intptr.

	- General code cleanup, reorganizing, and refactoring, with a billion minor changes 
	  here-and-there with everything else in the library alongside the above.


Version 2.1 (October 28th, 2022)


	- Made it so that TT_CONFIG_LOG_EXCEPTS has to be defined in order for TT_THROW to print.


Version 2.2 (February 4th, 2023)


	- Added tt/compiler_detect.h, allowing the library to detect the current compiler.
	
	- Removed TT_CONFIG_MSVC in a *backwards compatibile* manner (which is pointless since 
	  I'm the only one using the library, lol.)

	- Added (hopefully) *portable* TT_DISABLE_WARNING[_PUSH/POP] preprocessor definitions/macros
	  to tt/macros.h, which I think are pretty sweet.


Version 2.3 (February 12th, 2023)


	- Added tt/groups/multitasking, and the tt/task.h, tt/regular_task.h, and tt/thread_pool.h 
	  referenced therein.


Version 2.4 (February 15th, 2023)


	- Added tt::basic_str<Char> and the type aliases thereof to tt/groups/datastructures.h.


Version 2.5 (February 17th, 2023)


	- Added tt::pool<Key, Resource, Builder> to tt/groups/datastructures.h.

	- Added atomic aliases to tt/aliases.h.


Version 2.6 (February 19th, 2023)


	- Generally extended (and revised a bit) tt::pool's interface.

	- Made it so tt::pool stores its resource memory objects internally using shared pointers rather 
	  than unique ones, and making it so the end-user can gain access to these shared pointers to 
	  extend the lifetime of said resources.

	- As part of the above, tt::pool can now be copy-constructed/assigned, cloning the pool, but
	  reusing the same memory objects for its resources, as being immutable they (and their keys)
	  should still be good.

	- Added tt::basic_str<Char>::lit, so as to make it easier for end-user's of the API to
	  initialize tt::basic_str<Char> objects which view constant string literal memory such that
	  they take advantage of its reliability to avoid heap allocating a copy of it.

	- As part of the above, tt::basic_str<Char> was also revised a bit to make it less verbose,
	  such as by renaming tt::str_no_alloc_tag to tt::no_alloc_t.


Version 2.7 (February 22nd, 2023)


	- Renamed 'tt::pool' to 'tt::memoized_pool', to make room for other 'pool' implementations
	  in the future. (Last breaking change to it, I promise!)

	- Added tt/groups/interfaces.h.

	- Added tt/logger.h.
	- Added tt/regular_logger.h.
	- Added tt/thread_safe_logger.h.

